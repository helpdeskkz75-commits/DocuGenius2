–Ω–∏–∂–µ ‚Äî **–µ–¥–∏–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ–º–ø—Ç –¥–ª—è Replit Core** (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º). –û–Ω –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç **DocuGenius** –Ω–∞ –Ω–æ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ: —Å—Ç–∞–≤–∏—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã, –ø–∞—Ç—á–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ (`server/routes.ts`, `server/services/telegramBot.ts`), –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç ENV –∏ –¥–∞—ë—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–º–æ—É–∫-—Ç–µ—Å—Ç–æ–≤.
–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ Replit Core –∏ –∑–∞–ø—É—Å—Ç–∏.

---

# üîß Replit Core ‚Äî –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ–º–ø—Ç ¬´DocuGenius (–ø–æ–ª–Ω—ã–π –ø—Ä–æ–µ–∫—Ç + AI-—Ñ–∏—á–∏)¬ª

–¢—ã ‚Äî —Å–µ–Ω—å–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫/–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä. –í —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ–µ–∫—Ç **DocuGenius** (Node/TypeScript, Express, node-telegram-bot-api).
–ó–∞–¥–∞—á–∞: **–ø–æ–¥–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç —Ü–µ–ª–∏–∫–æ–º** –∏ –≤–∫–ª—é—á–∏—Ç—å AI-MVP-—Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø–æ–ª–æ–º–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏.

## –ü—Ä–∞–≤–∏–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

* –î–µ–π—Å—Ç–≤—É–π **–ø–æ—à–∞–≥–æ–≤–æ** –∏ **–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ**: –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥.
* –ò–∑–º–µ–Ω—è–π **—Ä–æ–≤–Ω–æ** —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ —Ç—Ä–æ–≥–∞–π.
* –õ—é–±–∞—è –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏/–ª–∏–Ω—Ç–∞ ‚Äî **—Å–Ω–∞—á–∞–ª–∞ —Ñ–∏–∫—Å**, –ø–æ—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∞–π.
* –í –∫–æ–Ω—Ü–µ **–∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞**: –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á—ë—Ç (—á—Ç–æ —Å–¥–µ–ª–∞–Ω–æ / –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å).

---

## –®–∞–≥ 0. –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

1. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ –∫–æ—Ä–Ω–µ –µ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: `DocuGenius/server/` –∏ —Ñ–∞–π–ª `DocuGenius/server/routes.ts`.
   –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –≤ –∫–æ—Ä–Ω–µ (`server/‚Ä¶` –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ `DocuGenius/`), –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ ‚Äî **–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Ç–µ –∂–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ**.
2. –ü—Ä–æ–≤–µ—Ä—å Node 18+.
3. –î–æ–±–∞–≤—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:

```bash
npm i googleapis qrcode
```

---

## –®–∞–≥ 1. ENV-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (.env.example –∏ Replit Secrets)

–î–æ–±–∞–≤—å (—Å–æ–∑–¥–∞–π, –µ—Å–ª–∏ –Ω–µ—Ç) `.env.example` –∏ **–Ω–µ –∑–∞—Ç–∏—Ä–∞–π** —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ; —Ç–æ–ª—å–∫–æ –¥–æ–ø–∏—à–∏ –±–ª–æ–∫ –Ω–∏–∂–µ:

```
TELEGRAM_BOT_TOKEN=
TELEGRAM_OPERATORS_GROUP_ID=

# Google Sheets (–∫–∞—Ç–∞–ª–æ–≥/—Ü–µ–Ω—ã)
PRICES_SHEET_ID=
PRICES_RANGE=Sheet1!A:Z

# Google Sheets (–ª–∏–¥—ã)
LEADS_SHEET_ID=
LEADS_RANGE=Sheet1!A:Z

# –ü–µ—Ä–µ–∑–≤–æ–Ω—ã (–º–æ–∂–Ω–æ reuse LEADS_SHEET_ID)
CALLBACKS_SHEET_ID=
CALLBACKS_RANGE=Sheet1!A:Z

# Google Service Account (JSON –≤ base64)
GOOGLE_CREDENTIALS_JSON_BASE64=

# –°—Å—ã–ª–∫–∏
PROMO_URL=https://example.com
TWO_GIS_URL=https://2gis.kz/astana/search/YourAddress

# –ü–ª–∞—Ç–µ–∂–∏ (–º–æ–∫ –∫–æ–ª–±—ç–∫–∞)
PAYMENT_CALLBACK_SECRET=

# WhatsApp (–∫–∞—Ä–∫–∞—Å 360dialog)
WA_PROVIDER=360dialog
WA_API_URL=https://waba.360dialog.io/v1
WA_API_KEY=
WA_PHONE_NUMBER_ID=
```

---

## –®–∞–≥ 2. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–≤–Ω–∏ –∏ –æ–±–Ω–æ–≤–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)

### 2.1 `server/services/langDetect.ts`

```ts
// Simple heuristic Kazakh/Russian detection
export function detectLang(text: string | undefined | null): 'kz' | 'ru' {
  if (!text) return 'ru';
  const t = text.trim().toLowerCase();
  const kzHints = /(–∏”ô|–∂–æ“õ|—Å”ô–ª–µ–º|—Ä–∞—Ö–º–µ—Ç|“õ–∞–ª–∞–π|—Ç“Ø–±—ñ—Ä—Ç–µ–∫|–±–∞“ì–∞—Å—ã|–º–µ—Ä–∑—ñ–º|–º–µ—Ä–¥—ñ–≥–µ—Ä|–∂–µ—Ç–∫—ñ–∑—É)/i;
  const kzLetters = /[“£“õ”ô“Ø–≥“±“ª—ñ]/i;
  if (kzHints.test(t) || kzLetters.test(t)) return 'kz';
  return 'ru';
}
```

### 2.2 `server/services/funnel.ts`

```ts
type Lang = 'ru' | 'kz';
export type FunnelStep = 0 | 1 | 2 | 3;

export interface FunnelState { step: FunnelStep; lang: Lang; answers: Record<string,string>; }

const PROMPTS: Record<Lang, [string,string,string]> = {
  ru: ["–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ? (–º–∞—Ç–µ—Ä–∏–∞–ª/—Ç–æ–≤–∞—Ä/–º–∞—Ä–∫–∞)",
       "–£—Ç–æ—á–Ω–∏—Ç–µ –æ–±—ä—ë–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫–æ–ª-–≤–æ, —Ä–∞–∑–º–µ—Ä—ã, —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)",
       "–ï—Å—Ç—å –ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ –±—é–¥–∂–µ—Ç—É –∏ —Å—Ä–æ–∫–∞–º?"],
  kz: ["–ù–∞“õ—Ç—ã –Ω–µ “õ–∞–∂–µ—Ç? (–º–∞—Ç–µ—Ä–∏–∞–ª/—Ç–∞—É–∞—Ä/–º–∞—Ä–∫–∞)",
       "–ö”©–ª–µ–º—ñ –º–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ–Ω –Ω–∞“õ—Ç—ã–ª–∞“£—ã–∑ (—Å–∞–Ω—ã, ”©–ª—à–µ–º—ñ, “õ–æ—Å—ã–º—à–∞ —Ç–∞–ª–∞–ø—Ç–∞—Ä)",
       "–ë—é–¥–∂–µ—Ç –ø–µ–Ω –º–µ—Ä–∑—ñ–º –±–æ–π—ã–Ω—à–∞ –±–∞“ì–¥–∞—Ä –±–∞—Ä –º–∞?"],
};

const SUMMARY: Record<Lang,string> = {
  ru: "–†–µ–∑—é–º–µ –∑–∞–ø—Ä–æ—Å–∞:\n- –ß—Ç–æ: {what}\n- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {spec}\n- –ë—é–¥–∂–µ—Ç/—Å—Ä–æ–∫: {budget}\n\n–ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å 1‚Äì3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü—Ä–æ–¥–æ–ª–∂–∏–º?",
  kz: "–°“±—Ä–∞–Ω—ã—Å “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã—Å—ã:\n- –ù–µ: {what}\n- –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä: {spec}\n- –ë—é–¥–∂–µ—Ç/–º–µ—Ä–∑—ñ–º: {budget}\n\n–ö–∞—Ç–∞–ª–æ–≥—Ç–∞–Ω 1‚Äì3 –Ω“±—Å“õ–∞ “±—Å—ã–Ω–∞ –∞–ª–∞–º—ã–Ω. –ñ–∞–ª“ì–∞—Å—Ç—ã—Ä–∞–º—ã–∑ –±–∞?",
};

export class FunnelService {
  sessions = new Map<any, FunnelState>();
  start(chatId: any, lang: Lang): string {
    this.sessions.set(chatId, { step: 1, lang, answers: {} });
    return PROMPTS[lang][0];
  }
  has(chatId: any) { return this.sessions.has(chatId); }
  next(chatId: any, text: string): string {
    const s = this.sessions.get(chatId); if (!s) return "";
    if (s.step === 1) { s.answers.what = text; s.step=2; return PROMPTS[s.lang][1]; }
    if (s.step === 2) { s.answers.spec = text; s.step=3; return PROMPTS[s.lang][2]; }
    s.answers.budget = text;
    const msg = SUMMARY[s.lang]
      .replace("{what}", s.answers.what || "‚Äî")
      .replace("{spec}", s.answers.spec || "‚Äî")
      .replace("{budget}", s.answers.budget || "‚Äî");
    this.sessions.delete(chatId);
    return msg;
  }
  cancel(chatId: any) { this.sessions.delete(chatId); }
}
export const funnelService = new FunnelService();
```

### 2.3 `server/services/qr.ts`

```ts
import QRCode from 'qrcode';
export async function generateQrPngBuffer(data: string): Promise<Buffer> {
  const dataUrl = await QRCode.toDataURL(data);
  const base64 = dataUrl.split(',')[1];
  return Buffer.from(base64, 'base64');
}
```

### 2.4 `server/integrations/google/sheets.ts`

```ts
import { google } from 'googleapis';

function getSheetsClient() {
  const credentialsB64 = process.env.GOOGLE_CREDENTIALS_JSON_BASE64;
  if (!credentialsB64) throw new Error('GOOGLE_CREDENTIALS_JSON_BASE64 not set');
  const json = JSON.parse(Buffer.from(credentialsB64, 'base64').toString('utf-8'));
  const scopes = ['https://www.googleapis.com/auth/spreadsheets'];
  const auth = new google.auth.GoogleAuth({ credentials: json, scopes });
  return google.sheets({ version: 'v4', auth });
}

export async function getRows(spreadsheetId: string, range: string) {
  const sheets = getSheetsClient();
  const resp = await sheets.spreadsheets.values.get({ spreadsheetId, range });
  return resp.data.values || [];
}

export async function appendRow(spreadsheetId: string, range: string, values: any[]) {
  const sheets = getSheetsClient();
  await sheets.spreadsheets.values.append({
    spreadsheetId, range, valueInputOption: 'USER_ENTERED',
    requestBody: { values: [values] }
  });
}

export async function getPriceBySku(spreadsheetId: string, range: string, sku: string) {
  const rows = await getRows(spreadsheetId, range);
  if (!rows.length) return null;
  const header = rows[0].map((x: string) => String(x).trim());
  const idx = {
    SKU: header.indexOf('SKU'), Name: header.indexOf('Name'),
    Category: header.indexOf('Category'), Price: header.indexOf('Price'),
    Currency: header.indexOf('Currency'), PhotoURL: header.indexOf('PhotoURL'),
  };
  for (let i=1; i<rows.length; i++) {
    const r = rows[i];
    if (String(r[idx.SKU]||'').trim().toLowerCase() === sku.trim().toLowerCase()) {
      return { SKU:r[idx.SKU], Name:r[idx.Name], Category:r[idx.Category],
               Price:r[idx.Price], Currency:r[idx.Currency], PhotoURL:r[idx.PhotoURL] };
    }
  }
  return null;
}

export async function searchProducts(spreadsheetId: string, range: string, query: string) {
  const rows = await getRows(spreadsheetId, range);
  if (!rows.length) return [];
  const header = rows[0].map((x: string) => String(x).trim());
  const idx = {
    SKU: header.indexOf('SKU'), Name: header.indexOf('Name'),
    Category: header.indexOf('Category'), Price: header.indexOf('Price'),
    Currency: header.indexOf('Currency'), PhotoURL: header.indexOf('PhotoURL'),
  };
  const q = query.trim().toLowerCase();
  const out: any[] = [];
  for (let i=1; i<rows.length; i++) {
    const r = rows[i];
    const name = String(r[idx.Name]||'').toLowerCase();
    const cat = String(r[idx.Category]||'').toLowerCase();
    if (name.includes(q) || cat.includes(q)) {
      out.push({ SKU:r[idx.SKU], Name:r[idx.Name], Category:r[idx.Category],
                 Price:r[idx.Price], Currency:r[idx.Currency], PhotoURL:r[idx.PhotoURL] });
    }
    if (out.length >= 10) break;
  }
  return out;
}
```

### 2.5 WhatsApp (–∫–∞—Ä–∫–∞—Å 360dialog)

`server/integrations/whatsapp/base.ts`

```ts
export interface WAClient { sendText(to: string, text: string): Promise<void>; }
```

`server/integrations/whatsapp/wa360dialog.ts`

```ts
import { WAClient } from './base';

export class WA360Client implements WAClient {
  private url: string; private key: string; private phoneId: string;
  constructor() {
    this.url = (process.env.WA_API_URL || '').replace(/\/$/, '');
    this.key = process.env.WA_API_KEY || '';
    this.phoneId = process.env.WA_PHONE_NUMBER_ID || '';
    if (!this.url || !this.key) throw new Error('WA_API_URL/WA_API_KEY not set');
  }
  async sendText(to: string, text: string) {
    const resp = await fetch(`${this.url}/messages`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'D360-API-KEY': this.key },
      body: JSON.stringify({ to, type: 'text', text: { body: text } })
    });
    if (!resp.ok) throw new Error(`WA send failed: ${resp.status} ${await resp.text()}`);
  }
}
```

`server/integrations/whatsapp/factory.ts`

```ts
import { WAClient } from './base';
import { WA360Client } from './wa360dialog';
export function getWAClient(): WAClient {
  const prov = (process.env.WA_PROVIDER || '360dialog').toLowerCase();
  switch (prov) { case '360dialog': return new WA360Client(); default: throw new Error('Unknown WA provider: '+prov); }
}
```

---

## –®–∞–≥ 3. –ü–∞—Ç—á `server/routes.ts`

1. –î–æ–±–∞–≤—å –∏–º–ø–æ—Ä—Ç—ã (–ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö):

```ts
import { generateQrPngBuffer } from "./services/qr";
import { getPriceBySku, searchProducts, appendRow } from "./integrations/google/sheets";
import { getWAClient } from "./integrations/whatsapp/factory";
```

2. –í–Ω—É—Ç—Ä–∏ `export async function registerRoutes(app: Express)` **–ø–µ—Ä–µ–¥** –µ—ë –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π `}` –≤—Å—Ç–∞–≤—å –±–ª–æ–∫ (–µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–π):

```ts
// === AI Assist MVP routes (catalog/pricing/leads/wa/qr) ===
app.get("/api/catalog/price/:sku", async (req, res) => {
  try {
    const sheetId = process.env.PRICES_SHEET_ID as string;
    const range = process.env.PRICES_RANGE || "Sheet1!A:Z";
    if (!sheetId) return res.status(400).json({ error: "PRICES_SHEET_ID not set" });
    const item = await getPriceBySku(sheetId, range, req.params.sku);
    if (!item) return res.status(404).json({ error: "SKU not found" });
    res.json(item);
  } catch (e:any) { res.status(500).json({ error: e.message || "Failed" }); }
});

app.get("/api/catalog/search", async (req, res) => {
  try {
    const q = String(req.query.q || "");
    const sheetId = process.env.PRICES_SHEET_ID as string;
    const range = process.env.PRICES_RANGE || "Sheet1!A:Z";
    if (!sheetId) return res.status(400).json({ error: "PRICES_SHEET_ID not set" });
    const items = await searchProducts(sheetId, range, q);
    res.json(items);
  } catch (e:any) { res.status(500).json({ error: e.message || "Failed" }); }
});

app.post("/api/leads", async (req, res) => {
  try {
    const { channel, name, phone, items, sum } = req.body || {};
    const leadId = "ld_" + Date.now();
    const leadsSheetId = process.env.LEADS_SHEET_ID;
    const leadsRange = process.env.LEADS_RANGE || "Sheet1!A:Z";
    if (leadsSheetId) {
      await appendRow(leadsSheetId, leadsRange,
        [leadId, channel || 'tg', name || '', phone || '', JSON.stringify(items||[]), sum || 0, "NEW", new Date().toISOString()]);
    }
    const qr = await generateQrPngBuffer(`pay://${leadId}`);
    res.setHeader("Content-Type", "image/png");
    res.send(qr);
  } catch (e:any) { res.status(500).json({ error: e.message || "Failed" }); }
});

app.post("/api/payments/qr/callback", async (req, res) => {
  const sig = req.header("x-signature");
  if (!sig || sig !== process.env.PAYMENT_CALLBACK_SECRET) return res.status(403).json({ error: "bad signature" });
  // TODO: mark lead as PAID in Google Sheets by LeadID
  res.json({ ok: true });
});

app.post("/api/whatsapp/webhook", async (req, res) => {
  try {
    const body = req.body || {};
    const msg = (body.messages && body.messages[0]) || null;
    if (!msg) return res.json({ ok: true });
    const from = msg.from || (msg.sender && msg.sender.id);
    let text = '';
    if (msg.text?.body) text = msg.text.body;
    else if (msg.button?.text) text = msg.button.text;
    else if (msg.interactive?.button_reply?.title) text = msg.interactive.button_reply.title;
    if (!from) return res.json({ ok: true });

    const wa = getWAClient();
    const lower = String(text||'').trim().toLowerCase();
    const sheetId = process.env.PRICES_SHEET_ID as string;
    const range = process.env.PRICES_RANGE || 'Sheet1!A:Z';

    if (lower.startsWith('/price')) {
      const parts = lower.split(' ').filter(Boolean);
      const sku = parts[1];
      if (!sku) { await wa.sendText(from, '–£–∫–∞–∂–∏—Ç–µ SKU: /price <sku>'); }
      else {
        const item = await getPriceBySku(sheetId, range, sku);
        await wa.sendText(from, item ? `${item.Name} ‚Äî ${item.Price} ${item.Currency||''} (SKU ${item.SKU})` : '–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π SKU');
      }
      return res.json({ ok: true });
    }

    if (lower.startsWith('/find')) {
      const q = lower.replace('/find','').trim();
      const items = await searchProducts(sheetId, range, q);
      if (!items.length) await wa.sendText(from, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      else await wa.sendText(from, items.slice(0,5).map(i=>`‚Ä¢ ${i.Name} ‚Äî ${i.Price} ${i.Currency||''} (SKU ${i.SKU})`).join('\\n'));
      return res.json({ ok: true });
    }

    if (lower.startsWith('/order')) {
      const leadsSheetId = process.env.LEADS_SHEET_ID;
      const leadsRange = process.env.LEADS_RANGE || 'Sheet1!A:Z';
      const leadId = 'ld_' + Date.now();
      if (leadsSheetId) await appendRow(leadsSheetId, leadsRange, [leadId,'wa',from,'','[]',0,'NEW',new Date().toISOString()]);
      await wa.sendText(from, '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –ú—ã –ø—Ä–∏—à–ª—ë–º —Å—Å—ã–ª–∫—É/QR –¥–ª—è –æ–ø–ª–∞—Ç—ã.');
      return res.json({ ok: true });
    }

    if (lower.includes('2gis') || lower.includes('–Ω–∞–≤–∏–≥–∞—Ü')) {
      await wa.sendText(from, process.env.TWO_GIS_URL || 'https://2gis.kz');
      return res.json({ ok: true });
    }
    if (lower.includes('–ø–µ—Ä–µ–∑–≤–æ–Ω')) {
      const cbSheetId = process.env.CALLBACKS_SHEET_ID || process.env.LEADS_SHEET_ID;
      const cbRange = process.env.CALLBACKS_RANGE || process.env.LEADS_RANGE || 'Sheet1!A:Z';
      if (cbSheetId) await appendRow(cbSheetId, cbRange, ['cb_'+Date.now(),'wa',from,'','CALLBACK',new Date().toISOString()]);
      await wa.sendText(from, '–ü—Ä–∏–Ω—è—Ç–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç.');
      return res.json({ ok: true });
    }

    const { funnelService } = await import("./services/funnel");
    const { detectLang } = await import("./services/langDetect");
    if (!funnelService.has(from)) {
      await wa.sendText(from, funnelService.start(from, detectLang(text) as any));
    } else {
      const reply = funnelService.next(from, text);
      if (reply) await wa.sendText(from, reply);
    }
    return res.json({ ok: true });
  } catch (e:any) {
    console.error('WA webhook error', e);
    return res.status(200).json({ ok: true });
  }
});
// === End of AI Assist MVP routes ===
```

---

## –®–∞–≥ 4. –ü–∞—Ç—á `server/services/telegramBot.ts`

–î–æ–±–∞–≤—å **–∏–º–ø–æ—Ä—Ç—ã** —Ä—è–¥–æ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏:

```ts
import { detectLang } from '../services/langDetect';
import { funnelService } from '../services/funnel';
import { generateQrPngBuffer } from '../services/qr';
import { getPriceBySku, searchProducts, appendRow } from '../integrations/google/sheets';
```

–í–Ω—É—Ç—Ä–∏ `async initialize()` (–¥–æ –µ—ë –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π `}`) –¥–æ–±–∞–≤—å –±–ª–æ–∫ (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–π):

```ts
// === AI Assist MVP commands ===
await this.bot.setMyCommands([
  { command: 'start', description: '–ù–∞—á–∞—Ç—å' },
  { command: 'stop', description: '–ü–µ—Ä–µ–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ –º–µ–Ω–µ–¥–∂–µ—Ä—É' },
  { command: 'price', description: '–¶–µ–Ω–∞ –ø–æ SKU' },
  { command: 'find', description: '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞' },
  { command: 'promo', description: '–ö–∞—Ç–∞–ª–æ–≥/–∞–∫—Ü–∏–∏' },
  { command: 'order', description: '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∏ –æ–ø–ª–∞—Ç—É' }
]);

// /start ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (2GIS/–ü–µ—Ä–µ–∑–≤–æ–Ω) + —Å—Ç–∞—Ä—Ç –≤–æ—Ä–æ–Ω–∫–∏
this.bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const keyboard = { keyboard: [[{ text:'üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è (2GIS)' }, { text:'üìû –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å' }]], resize_keyboard: true };
  await this.bot!.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:', { reply_markup: keyboard as any });
  const first = funnelService.start(chatId, 'ru' as any);
  await this.bot!.sendMessage(chatId, first);
});

// /stop ‚Äî —Ö—ç–Ω–¥–æ–≤–µ—Ä
this.bot.onText(/\/stop/, async (msg) => {
  const chatId = msg.chat.id;
  await this.bot!.sendMessage(chatId, '–ü–µ—Ä–µ–¥–∞–ª –¥–∏–∞–ª–æ–≥ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ, –æ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è.');
  const groupId = process.env.TELEGRAM_OPERATORS_GROUP_ID;
  if (groupId) await this.bot!.sendMessage(Number(groupId), `–•—ç–Ω–¥–æ–≤–µ—Ä: —á–∞—Ç ${chatId} –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.`);
});

// /price
this.bot.onText(/\/price (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const sku = (match?.[1] || '').trim();
  if (!sku) return this.bot!.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ SKU: /price <sku>');
  const sheetId = process.env.PRICES_SHEET_ID as string;
  const range = process.env.PRICES_RANGE || 'Sheet1!A:Z';
  try {
    const item = await getPriceBySku(sheetId, range, sku);
    if (!item) return this.bot!.sendMessage(chatId, '–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π SKU');
    const text = `${item.Name} ‚Äî ${item.Price} ${item.Currency||''}\nSKU: ${item.SKU}`;
    if (item.PhotoURL) await this.bot!.sendPhoto(chatId, item.PhotoURL, { caption: text });
    else await this.bot!.sendMessage(chatId, text);
  } catch { await this.bot!.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã'); }
});

// /find
this.bot.onText(/\/find (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const q = (match?.[1] || '').trim();
  const sheetId = process.env.PRICES_SHEET_ID as string;
  const range = process.env.PRICES_RANGE || 'Sheet1!A:Z';
  try {
    const items = await searchProducts(sheetId, range, q);
    if (!items.length) return this.bot!.sendMessage(chatId, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    const top = items.slice(0,5).map(i=>`‚Ä¢ ${i.Name} ‚Äî ${i.Price} ${i.Currency||''} (SKU ${i.SKU})`).join('\n');
    await this.bot!.sendMessage(chatId, top);
  } catch { await this.bot!.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞'); }
});

// /promo
this.bot.onText(/\/promo/, async (msg) => {
  const chatId = msg.chat.id;
  const url = process.env.PROMO_URL || 'https://example.com';
  await this.bot!.sendMessage(chatId, '–ö–∞—Ç–∞–ª–æ–≥ –∏ –∞–∫—Ü–∏–∏:', { reply_markup: { inline_keyboard: [[{ text:'–û—Ç–∫—Ä—ã—Ç—å', url }]] } as any });
});

// /order ‚Äî –ª–∏–¥ + QR
this.bot.onText(/\/order/, async (msg) => {
  const chatId = msg.chat.id;
  const leadsSheetId = process.env.LEADS_SHEET_ID;
  const leadsRange = process.env.LEADS_RANGE || 'Sheet1!A:Z';
  const leadId = 'ld_' + Date.now();
  try {
    if (leadsSheetId) await appendRow(leadsSheetId, leadsRange, [leadId,'tg',msg.from?.username||'','', '[]', 0, 'NEW', new Date().toISOString()]);
    const png = await generateQrPngBuffer(`pay://${leadId}`);
    await this.bot!.sendPhoto(chatId, png, { caption: '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –¥–ª—è –æ–ø–ª–∞—Ç—ã' });
    const groupId = process.env.TELEGRAM_OPERATORS_GROUP_ID;
    if (groupId) await this.bot!.sendMessage(Number(groupId), `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ${leadId} –∏–∑ —á–∞—Ç–∞ ${chatId}`);
  } catch { await this.bot!.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'); }
});

// –ö–Ω–æ–ø–∫–∏ 2GIS/–ü–µ—Ä–µ–∑–≤–æ–Ω + fallback-–≤–æ—Ä–æ–Ω–∫–∞
this.bot.on('message', async (msg) => {
  if (!msg.text || msg.text.startsWith('/')) return;
  const text = msg.text.trim().toLowerCase();
  const chatId = msg.chat.id;

  if (text.includes('–Ω–∞–≤–∏–≥–∞—Ü') || text.includes('2gis')) {
    const url = process.env.TWO_GIS_URL || 'https://2gis.kz';
    return this.bot!.sendMessage(chatId, url);
  }
  if (text.includes('–ø–µ—Ä–µ–∑–≤–æ–Ω')) {
    const sheetId = process.env.CALLBACKS_SHEET_ID || process.env.LEADS_SHEET_ID;
    const range = process.env.CALLBACKS_RANGE || process.env.LEADS_RANGE || 'Sheet1!A:Z';
    if (sheetId) await appendRow(sheetId, range, ['cb_'+Date.now(),'tg',msg.from?.username||'','CALLBACK', new Date().toISOString()]);
    const groupId = process.env.TELEGRAM_OPERATORS_GROUP_ID;
    if (groupId) await this.bot!.sendMessage(Number(groupId), `–ó–∞–ø—Ä–æ—à–µ–Ω –ø–µ—Ä–µ–∑–≤–æ–Ω –∏–∑ —á–∞—Ç–∞ ${chatId}`);
    return this.bot!.sendMessage(chatId, '–ü—Ä–∏–Ω—è—Ç–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç.');
  }

  if (!funnelService.has(chatId)) {
    const first = funnelService.start(chatId, detectLang(msg.text) as any);
    await this.bot!.sendMessage(chatId, first);
  } else {
    const reply = funnelService.next(chatId, msg.text);
    if (reply) await this.bot!.sendMessage(chatId, reply);
  }
});
// === End of AI Assist MVP commands ===
```

---

## –®–∞–≥ 5. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞

–°–æ–∑–¥–∞–π/–æ–±–Ω–æ–≤–∏ `DocuGenius/README_PATCH.txt` —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π: —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥, —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, ENV –∏ **smoke-—á–µ–∫-–ª–∏—Å—Ç** –Ω–∏–∂–µ.

---

## –®–∞–≥ 6. –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫

```bash
npm run dev
# –∏–ª–∏ npm run start (–∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ)
```

---

## –®–∞–≥ 7. –°–º–æ—É–∫-—Ç–µ—Å—Ç—ã (—Ä—É—á–Ω—ã–µ)

* Telegram:

  * `/start` ‚Üí –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (üß≠ 2GIS, üìû –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å) –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤–æ—Ä–æ–Ω–∫–∏.
  * `/price <SKU>` / `/find <q>` ‚Üí –æ—Ç–≤–µ—Ç—ã –∏–∑ Google Sheets.
  * `/order` ‚Üí —Å–æ–∑–¥–∞—ë—Ç—Å—è –ª–∏–¥ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω `LEADS_SHEET_ID`), –ø—Ä–∏—Ö–æ–¥–∏—Ç PNG-QR, –≥—Ä—É–ø–ø–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞).
  * –ù–∞–∂–∞—Ç—å **üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è (2GIS)** ‚Üí –ø—Ä–∏—Ö–æ–¥–∏—Ç `TWO_GIS_URL`.
  * –ù–∞–∂–∞—Ç—å **üìû –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å** ‚Üí –∑–∞–ø–∏—Å—å –≤ `CALLBACKS_*` –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
* REST:

  * `GET /api/catalog/price/<SKU>` ‚Üí JSON –ø–æ–∑–∏—Ü–∏–∏
  * `GET /api/catalog/search?q=test` ‚Üí JSON –º–∞—Å—Å–∏–≤–∞
  * `POST /api/leads` ‚Üí –æ—Ç–≤–µ—Ç `image/png` (QR)
  * `POST /api/payments/qr/callback` —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º `x-signature=<—Å–µ–∫—Ä–µ—Ç>` ‚Üí `{ ok: true }`
* WhatsApp (360dialog):

  * –í–µ–±—Ö—É–∫ `POST /api/whatsapp/webhook` –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç `/price`, `/find`, `/order`, ‚Äú2GIS‚Äù, ‚Äú–ø–µ—Ä–µ–∑–≤–æ–Ω‚Äù –∏ fallback-–≤–æ—Ä–æ–Ω–∫—É KAZ/RUS.

---

## –û—Ç—á—ë—Ç –ø–æ —à–∞–≥–∞–º (–ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)

* –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö/–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
* –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ENV –∏ –∫–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.
* –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–º–æ—É–∫-—Ç–µ—Å—Ç–æ–≤ –∏ –ª—é–±—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è.

**–¶–µ–ª—å:** –ø—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–Ω—è—Ç –Ω–∞ –Ω–æ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ, AI-MVP —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ DocuGenius –Ω–µ –Ω–∞—Ä—É—à–µ–Ω–∞.
